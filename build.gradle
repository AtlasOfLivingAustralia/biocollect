buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://nexus.ala.org.au/content/groups/public/" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.6"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineVersion"
        classpath "com.bertramlabs.plugins:less-asset-pipeline:$assetPipelineVersion"
        classpath 'com.bertramlabs.plugins:sass-asset-pipeline:3.2.5'
        classpath 'com.bmuschko:gradle-clover-plugin:3.0.1'
        classpath 'org.grails.plugins:quartz:2.0.13'
    }
}


version "6.1.1-SNAPSHOT"
group "au.org.ala"

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "war"
apply plugin: "groovy"
apply plugin: "org.grails.grails-web"
apply plugin:"com.github.erdi.webdriver-binaries"
apply plugin: "com.bertramlabs.asset-pipeline"
apply plugin: "org.grails.grails-gsp"

if (Boolean.valueOf(enableClover)) {
    apply from: "${project.projectDir}/gradle/clover.gradle"
}
apply from: "${project.projectDir}/gradle/publish.gradle"

repositories {
    mavenLocal()
    //for missing jai_core.jar
   //maven { url "https://mvnrepository.com" }
    maven { url "https://repo.osgeo.org/repository/release/" }
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://nexus.ala.org.au/content/groups/public/" }
    mavenCentral()
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
//    implementation "org.grails:grails-plugin-rest"
//    implementation "org.grails:grails-plugin-databinding"
//    implementation "org.grails.plugins:async"
//    implementation "org.grails.plugins:events"
//    implementation "org.grails.plugins:gsp"
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compileOnly "io.micronaut:micronaut-inject-groovy"
    implementation "org.seleniumhq.selenium:selenium-chrome-driver:4.0.0"
    console "org.grails:grails-console"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-dependencies"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "org.grails.plugins:cache"
    implementation "org.grails.plugins:async"
    implementation "org.grails:grails-async-gpars"
    implementation "org.grails.plugins:scaffolding"
    profile "org.grails.profiles:web"
    implementation "com.bertramlabs.plugins:asset-pipeline-core:$assetPipelineVersion"
    implementation "com.bertramlabs.plugins:asset-pipeline-grails:$assetPipelineVersion"
    implementation "com.github.ben-manes.caffeine:caffeine:2.9.3"
    implementation "commons-io:commons-io:2.6"
    implementation "com.drewnoakes:metadata-extractor:${metadataExtractorVersion}"
    implementation "org.imgscalr:imgscalr-lib:${imgscalrVersion}"
    implementation "org.apache.httpcomponents:httpmime:${httpmimeVersion}"
    implementation "com.vividsolutions:jts:${jtsVersion}"

    implementation "org.geotools.xsd:gt-xsd-kml:${geoToolsVersion}"
    implementation "org.geotools:gt-shapefile:${geoToolsVersion}"
    implementation "org.geotools:gt-geojson:${geoToolsVersion}"
    implementation "org.geotools:gt-epsg-hsql:${geoToolsVersion}"

    implementation "joda-time:joda-time:2.3"
    // Used by the scripts
    implementation('org.grails.plugins:http-builder-helper:1.1.0') {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    implementation "org.apache.httpcomponents:httpclient:4.5.7"
    runtimeOnly 'org.webjars:jquery:1.12.4'
    implementation 'dk.glasius:external-config:3.0.0'
    implementation "org.grails.plugins:excel-import:3.0.2"
    implementation "org.grails.plugins:excel-export:0.2.1"
    implementation 'org.grails.plugins:grails-google-visualization:2.2.1'
    implementation group: 'org.apache.poi', name: 'poi', version: '3.17'
    implementation 'org.grails.plugins:mail:2.0.0.RC6'

    implementation 'org.grails.plugins:grails-markdown:3.0.0'
    implementation 'org.grails.plugins:grails-cookie:2.0.3'
//    implementation 'org.grails.plugins:cache:5.0.0.RC1'

    //ALA plugins
    implementation("au.org.ala.plugins.grails:images-client-plugin:1.4") {
        exclude group: 'commons-httpclient', module: 'commons-httpclient'
    }


    implementation "org.grails.plugins:ala-admin-plugin:2.2"
    implementation "org.grails.plugins:ala-auth:3.2.3"
    runtimeOnly "org.grails.plugins:ala-bootstrap3:3.2.3"

    implementation "au.org.ala:userdetails-service-client:1.5.0"
    implementation "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
    implementation 'au.org.ala:ala-cas-client:2.5'
    runtimeOnly("org.springframework.boot:spring-boot-properties-migrator")
    runtimeOnly 'com.bertramlabs.plugins:less-asset-pipeline:3.3.1'
    implementation 'com.bertramlabs.plugins:sass-asset-pipeline:3.2.5'
    implementation 'org.codehaus.groovy:groovy-dateutil:2.5.0'

    if (!Boolean.valueOf(inplace)) {
        implementation "org.grails.plugins:ala-map-plugin:3.0"
        implementation "org.grails.plugins:ecodata-client-plugin:4.0.4-SNAPSHOT"
    }

    testCompileOnly "org.grails:grails-test-mixins:3.3.0"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "org.grails.plugins:geb"
    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:4.0.0"
    testImplementation "org.seleniumhq.selenium:selenium-api:4.0.0"
    testImplementation "org.seleniumhq.selenium:selenium-support:4.0.0"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-firefox-driver:4.0.0"
    testCompileOnly "com.github.tomakehurst:wiremock-jre8-standalone:2.28.0"
    testCompileOnly "com.codeborne:phantomjsdriver:1.3.0"
}

springBoot {
    buildInfo()
}

bootRun {
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx2048m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

bootJar {
    enabled = true
    classifier = 'exec'
    launchScript()
}

assets {
    minifyJs = true
    minifyCss = true
    maxThreads = 4
    minifyOptions = [
            languageMode  : 'ES6', //languageIn
            targetLanguage: 'ES5', // languageOut
    ]

    includes = []
    excludes = ["**/*.scss", '**/*.less','**/build/hintrc.js', 'hintrc.unminified.js', '**/spec/spec.hintrc.js', 'spec.hintrc.unminified.js', 'node_modules/**']
}

if (Boolean.valueOf(inplace)) {
    grails {
        exploded = true
        plugins {
            implementation(project(':ecodata-client-plugin'))
            implementation(project(':ala-map-plugin'))
        }
    }

    // Make ecodata-client-plugin _Events task is called
    assetCompile.dependsOn("ecodata-client-plugin:_Events")
    compileGroovy.dependsOn("ecodata-client-plugin:_Events")
    bootRun.dependsOn("ecodata-client-plugin:_Events")
}

task _Events {
    doLast {
        println "Running biocollect _events.groovy script"
        println "${project.projectDir}/_events.groovy"
        new GroovyScriptEngine(["${project.projectDir}"] as String[]).run("_events.groovy", new Binding(['projectDir': project.projectDir]))
    }
}

// the tasks used here for dependsOn may be incomplete/incorrect
assetCompile.dependsOn(_Events)
compileGroovy.dependsOn(_Events)
bootRun.dependsOn(_Events)


tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}
