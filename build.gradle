import static org.springframework.boot.gradle.SpringBootPluginExtension.LayoutType.*

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://nexus.ala.org.au/content/groups/public/" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        //classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.4"
    }
}

plugins {
    id 'war'
}

version "5.0-SNAPSHOT"
group "au.org.ala"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply from: 'https://raw.githubusercontent.com/AtlasOfLivingAustralia/travis-build-configuration/master/travis_grails_publish.gradle'
//apply plugin:"org.grails.grails-plugin-publish"


repositories {
    mavenLocal()
    //for missing jai_core.jar
  //  maven { url "http://download.osgeo.org/webdav/geotools"}
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://nexus.ala.org.au/content/groups/public/" }
    mavenCentral()
   // maven { url "http://maven.geotoolkit.org"}

}

//def tomcatVersion = '7.0.55.2'
def metadataExtractorVersion = "2.6.2"
def imgscalrVersion = "4.2"
def httpmimeVersion = "4.2.1"
def jtsVersion = "1.8"
def geoToolsVersion = "11.1"


dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    provided "org.springframework.boot:spring-boot-starter-tomcat"

    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.1"
    //runtime "com.h2database:h2"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
    compile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    compile "com.drewnoakes:metadata-extractor:${metadataExtractorVersion}"
    compile "org.imgscalr:imgscalr-lib:${imgscalrVersion}"
    compile "org.apache.httpcomponents:httpmime:${httpmimeVersion}"
    compile "com.vividsolutions:jts:${jtsVersion}"
    //compile "org.geotools.xsd:gt-xsd-kml:${geoToolsVersion}"
    compile ("org.geotools.xsd:gt-xsd-kml:${geoToolsVersion}") {
        exclude group: 'javax.media', module: 'jai_core'
    }

    compile "joda-time:joda-time:2.3"
    compile "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
    compile "org.apache.httpcomponents:httpcore:4.4.1"
    compile "org.apache.httpcomponents:httpclient:4.4.1"

    testCompile "org.grails:grails-test-mixins:3.3.0"
    testRuntime 'com.github.detro:phantomjsdriver:1.2.0'

    //JSON converter
    //compile 'org.grails.plugins:converters'
    runtime 'org.webjars:jquery:1.12.4'
    //mimic grails.config.locations like in Grails 2.x
    compile 'org.grails.plugins:external-config:2.0.0.RC1'
    compile "org.grails.plugins:excel-import:3.0.2"
    compile "org.grails.plugins:excel-export:0.2.1"
    compile 'org.grails.plugins:grails-google-visualization:2.2.1'
    compile group: 'org.apache.poi', name: 'poi', version: '3.17'
    compile 'org.grails.plugins:mail:2.0.0.RC6'


    compile 'org.grails.plugins:grails-markdown:3.0.0'
    compile 'org.grails.plugins:grails-cookie:2.0.3'

    compile 'org.grails.plugins:cache:5.0.0.RC1'
    compile 'org.grails.plugins:grails-google-visualization:2.2.1'

    //ALA plugins
    //TODO Same namespace?
    compile "au.org.ala.plugins.grails:images-client-plugin:0.9-SNAPSHOT"
    compile "org.grails.plugins:ala-auth:3.0.2"
    runtime "org.grails.plugins:ala-bootstrap3:3.0.4"
    compile "org.grails.plugins:ala-admin-plugin:2.1"
    compile "org.grails.plugins:ala-map-plugin:3.0-SNAPSHOT"
    compile "org.grails.plugins:ecodata-client-plugin:3.0-SNAPSHOT"
}

springBoot {
    buildInfo()
    layout = WAR
}


bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
}

bootRepackage {
    enabled = true
    executable = true
    classifier = 'exec'
}

assets {
    minifyJs = true
    minifyCss = true

}



//grailsPublish {
//    websiteUrl = 'https://github.com/AtlasOfLivingAustralia/biocollect'
//    issueTrackerUrl = 'https://github.com/AtlasOfLivingAustralia/biocollect/issues'
//    vcsUrl = 'https://github.com/AtlasOfLivingAustralia/biocollect'
//    githubSlug = 'AtlasOfLivingAustralia/biocollect'
//    license {
//        name = 'Apache-2.0'
//    }
//    title = "Biocollect"
//    desc = ""
//    developers = [TV: "Temi V",CG:"Chris Goldwin",QB:"Qifeng Bai"]
//}
//
//publishing {
//    repositories {
//        maven {
//            name 'Nexus'
//            url "https://nexus.ala.org.au/content/repositories/${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases' }"
//            credentials {
//                username = System.getenv('TRAVIS_DEPLOY_USERNAME')
//                password = System.getenv('TRAVIS_DEPLOY_PASSWORD')
//            }
//        }
//    }
//    publications {
//        mavenJar(MavenPublication) {
//            pom.withXml {
//                def pomNode = asNode()
//                pomNode.dependencyManagement.replaceNode {}
//
//                // simply remove dependencies without a version
//                // version-less dependencies are handled with dependencyManagement
//                // see https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/8 for more complete solutions
//                pomNode.dependencies.dependency.findAll {
//                    it.version.text().isEmpty()
//                }.each {
//                    it.replaceNode {}
//                }
//            }
//            from components.java
//
//        }
//    }
//}